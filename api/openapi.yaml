openapi: 3.0.0
info:
  title: Beach Family Pools API
  description: Beach Family Pools Services API
  version: 1.0.0
servers:
- url: http://api.beachfamilypools.com:4000/api/v1
paths:
  /users:
    get:
      tags:
      - users
      summary: Returns a list of all users
      operationId: getUsers
      responses:
        "200":
          $ref: '#/components/responses/Users200'
        "500":
          description: Internal server error
      x-swagger-router-controller: Users
  /accounts:
    get:
      tags:
      - accounts
      summary: Returns a list of all accounts
      operationId: getAccounts
      responses:
        "200":
          $ref: '#/components/responses/Accounts200'
        "500":
          description: Internal server error
      x-swagger-router-controller: Accounts
    post:
      tags:
      - accounts
      summary: Adds a single account
      operationId: addAccount
      requestBody:
        $ref: '#/components/requestBodies/Account'
      responses:
        "200":
          $ref: '#/components/responses/Account200'
        "400":
          description: Validation error
        "500":
          description: Internal server error          
      x-swagger-router-controller: Accounts
  /accounts/{id}:
    get:
      tags:
      - accounts
      summary: Returns a single account
      operationId: getAccountById
      parameters:
      - name: accountId
        in: path
        description: Id of account to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          $ref: '#/components/responses/Account200'
        "404":
          description: Account not found
        "500":
          description: Internal server error
      x-swagger-router-controller: Accounts
    put:
      tags:
      - accounts
      summary: Updates an existing account
      operationId: updateAccount
      parameters:
      - name: accountId
        in: path
        description: Id of account to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/Account'
      responses:
        "200":
          $ref: '#/components/responses/Account200'
        "400":
          description: Validation error
        "404":
          description: Account not found
        "500":
          description: Internal server error
      x-swagger-router-controller: Accounts
  /addresses:
    get:
      tags:
      - addresses
      summary: Returns a list of all addresses
      operationId: getAddresses
      responses:
        "200":
          $ref: '#/components/responses/Addresses200'
        "500":
          description: Internal server error
      x-swagger-router-controller: Addresses
    post:
      tags:
      - addresses
      summary: Adds a single address
      operationId: addAddress
      requestBody:
        $ref: '#/components/requestBodies/Address'
      responses:
        "200":
          $ref: '#/components/responses/Address200'
        "400":
          description: Validation error
        "500":
          description: Internal server error
      x-swagger-router-controller: Addresses
  /addresses/{id}:
    get:
      tags:
      - addresses
      summary: Returns a single address
      operationId: getAddressById
      parameters:
      - name: addressId
        in: path
        description: Id of service address to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          $ref: '#/components/responses/Address200'
        "404":
          description: Address not found
        "500":
          description: Internal server error
      x-swagger-router-controller: Addresses
    put:
      tags:
      - addresses
      summary: Updates an existing service address
      operationId: updateAddress
      parameters:
      - name: addressId
        in: path
        description: Id of service address to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/Address'
      responses:
        "200":
          $ref: '#/components/responses/Address200'
        "400":
          description: Validation error
        "404":
          description: Address not found
        "500":
          description: Internal server error
      x-swagger-router-controller: Addresses
  /assets:
    get:
      tags:
      - assets
      summary: Returns a list of all assets
      operationId: getAssets
      responses:
        "200":
          $ref: '#/components/responses/Assets200'
        "500":
          description: Internal server error
      x-swagger-router-controller: Assets
  /assets/{id}:
    get:
      tags:
      - assets
      summary: Returns a single asset
      operationId: getAssetById
      parameters:
      - name: assetId
        in: path
        description: Id of asset to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          $ref: '#/components/responses/Asset200'
        "404":
          description: Asset not found
        "500":
          description: Internal server error  
      x-swagger-router-controller: Assets
  /services:
    get:
      tags:
      - services
      summary: Returns a list of all services
      operationId: getServices
      responses:
        "200":
          $ref: '#/components/responses/Services200'
        "500":
          description: Internal server error
      x-swagger-router-controller: Services
  /services/{id}:
    get:
      tags:
      - services
      summary: Returns a single service
      operationId: getServiceById
      parameters:
      - name: serviceId
        in: path
        description: Id of service to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          $ref: '#/components/responses/Service200'
        "404":
          description: Service not found
        "500":
          description: Internal server error  
      x-swagger-router-controller: Services
  /serviceCalls:
    get:
      tags:
      - service calls
      summary: Returns a list of all service calls/work orders
      operationId: getServiceCalls
      responses:
        "200":
          $ref: '#/components/responses/ServiceCalls200'
        "500":
          description: Internal server error
      x-swagger-router-controller: ServiceCalls
    post:
      tags:
      - service calls
      summary: Adds a single service call/work order
      operationId: addServiceCall
      requestBody:
        $ref: '#/components/requestBodies/ServiceCall'
      responses:
        "200":
          $ref: '#/components/responses/ServiceCall200'
        "400":
          description: Validation error
        "500":
          description: Internal server error
      x-swagger-router-controller: ServiceCalls
  /serviceCalls/{id}:
    get:
      tags:
      - service calls
      summary: Returns a single service call/work order
      operationId: getServiceCallById
      parameters:
      - name: serviceCallId
        in: path
        description: Id of service call/work order to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          $ref: '#/components/responses/ServiceCall200'
        "404":
          description: Service call not found
        "500":
          description: Internal server error  
      x-swagger-router-controller: ServiceCalls
    put:
        tags:
        - service calls
        summary: Updates an existing service call
        operationId: updateServiceCall
        parameters:
        - name: serviceCallId
          in: path
          description: Id of service call to update
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        requestBody:
          $ref: '#/components/requestBodies/ServiceCall'
        responses:
          "200":
            $ref: '#/components/responses/ServiceCall200'
          "400":
            description: Validation error
          "404":
            description: Service call not found
          "500":
            description: Internal server error
        x-swagger-router-controller: ServiceCalls
  /travelEvents:
    get:
      tags:
      - travel events
      summary: Returns a list of all travel events
      operationId: getTravelEvents
      responses:
        "200":
          $ref: '#/components/responses/TravelEvents200'
        "500":
          description: Internal server error
      x-swagger-router-controller: TravelEvents
    post:
      tags:
      - travel events
      summary: Adds a single travel event
      operationId: addTravelEvent
      requestBody:
        $ref: '#/components/requestBodies/TravelEvent'
      responses:
        "200":
          $ref: '#/components/responses/TravelEvent200'
        "400":
          description: Validation error
        "500":
          description: Internal server error          
      x-swagger-router-controller: Accounts
components:
  schemas:
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
    User:
      required:
      - hash
      - accountId
      type: object
      properties:
        userId:
          type: integer
        isAdmin:
          type: boolean
        hash:
          type: string
        accountId:
          type: integer
      example:
        isAdmin: true
        hash: hash
        accountId: 2
    Accounts:
      type: array
      items:
        $ref: '#/components/schemas/Account'
    Account:
      required:
      - firstName
      - lastName
      - type
      type: object
      additionalProperties: false
      properties:
        accountId:
          type: integer
        company:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        emailAddress:
          type: string
        type:
          type: string
          enum:
          - employee
          - customer
          - vendor
        createdAt:
          type: string
          nullable: true
        updatedAt:
          type: string
          nullable: true
      example:
        company: null
        firstName: Sally
        lastName: Smith
        phoneNumber: 520-444-6666
        emailAddress: smith@yahoo.com
        type: Customer
    Addresses:
      type: array
      items:
        $ref: '#/components/schemas/Address'
    Address:
      required:
      - streetAddress
      - city
      - state
      - postalCode
      - accountId
      type: object
      additionalProperties: false
      properties:
        addressId:
          type: string
        streetAddress:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        mapUrl:
          type: string
        photoUrl:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        assets:
          type: array
          items:
            type: integer
        accountId:
          type: integer
        createdAt:
          type: string
          nullable: true
        updatedAt:
          type: string
          nullable: true
      example:
        streetAddress: streetAddress
        city: city
        postalCode: postalCode
        state: state
        mapUrl: mapUrl
        photoUrl: photoUrl
        latitude: latitude
        longitude: longitude
        assets: [1, 2, 3]
        accountId: 2
    Assets:
      type: array
      items:
        $ref: '#/components/schemas/Asset'
    Asset:
      required:
      - make
      - category
      type: object
      additionalProperties: false
      properties:
        assetId:
          type: integer
        make:
          type: string
        model:
          type: string
        category:
          type: string
        notes:
          type: string
        createdAt:
          type: string
          nullable: true
        updatedAt:
          type: string
          nullable: true
      example:
        make: make
        model: model
        category: category
        notes: notes
    Services:
      type: array
      items:
        $ref: '#/components/schemas/Service'
    Service:
      required:
      - name
      type: object
      additionalProperties: false
      properties:
        serviceId:
          type: integer
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          nullable: true
        updatedAt:
          type: string
          nullable: true
      example:
        name: name
        description: description
    ServiceCalls:
      type: array
      items:
        $ref: '#/components/schemas/ServiceCall'
    ServiceCall:
      required:
      - addressId
      - userId
      - startTime
      - endTime
      type: object
      additionalProperties: false
      properties:
        serviceCallId:
          type: integer
        salt:
          type: number
        phosphates:
          type: number
        tds:
          type: number
        filterPsi:
          type: number
        chlorine:
          type: number
        ph:
          type: number
        alkalinity:
          type: number
        cya:
          type: number
        trichlorShock:
          type: number
        sodaAsh:
          type: number
        sodiumBicarbonate:
          type: number
        tabs:
          type: integer
        granularTrichlor:
          type: number
        phosphateRemover:
          type: number
        muriaticAcid:
          type: number
        sodiumThiosulfate:
          type: number
        stabilizer:
          type: number
        greenToClean:
          type: number
        de:
          type: number
        userid:
          type: integer
        addressId:
          type: integer
        technician:
          type: string
        startTime:
          type: string
        endTime:
          type: string
        servicesPerformed:
          type: array
          items:
            type: integer
      example:
        salt: 3900.0
        phosphates: null
        tds: null
        filterPsi: 30
        chlorine: 15.0
        ph: 8.4
        alkalinity: 240
        cya: 300
        trichlorShock: 0
        sodaAsh: 0
        sodiumBicarbonate: 0
        tabs: 1
        granularTrichlor: 0
        phosphateRemover: 0
        muriaticAcid: 0
        sodiumThiosulfate: 0
        stabilizer: 0
        greenToClean: 0
        de: 0
        userid: 1
        serviceAddressId: 4
        technician: technician
        startTime: 2018-01-21T00:00:00Z
        endTime: 2018-01-21T00:00:00Z
        servicesPerformed: [1, 2, 3]
    TravelEvents:
      type: array
      items:
        $ref: '#/components/schemas/TravelEvent'
    TravelEvent:
      required:
      - eventTime
      - latitude
      - longitude
      - eventType
      - addressId
      - userId
      type: object
      additionalProperties: false
      properties:
        travelEventId:
          type: integer
        eventTime:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        eventType:
          type: string
          enum: [arrival, departure]
        addressId:
          type: integer
        userId:
          type: integer
      example:
        eventTime: 2018-01-21T00:00:00Z
        latitude: latitude
        longitude: longitude
        eventType: arrival
        addressId: 1
        userId: 3
  responses:
    Users200:
      description: JSON array of user objects
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Users'
    Account200:
      description: JSON object with account information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
    Accounts200:
      description: JSON array of account objects
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Accounts'
    Address200:
      description: JSON object with address information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Address'
    Addresses200:
      description: JSON array of address objects
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Addresses'
    Asset200:
      description: JSON object with asset information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Asset'
    Assets200:
      description: JSON array of asset objects
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Assets'
    Service200:
      description: JSON object with service information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Service'
    Services200:
      description: JSON array of service objects
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Services'
    ServiceCall200:
      description: JSON object with service call information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceCall'
    ServiceCalls200:
      description: JSON array of service call objects
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceCalls'
    TravelEvent200:
      description: JSON object with travel event information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TravelEvent'
    TravelEvents200:
      description: JSON array of travel event objects
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TravelEvents'
  requestBodies:
    Account:
      description: JSON object with account information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
      required: true
    Address:
      description: JSON object with address information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Address'
      required: true
    Asset:
      description: JSON object with asset information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Asset'
      required: true
    Service:
      description: JSON object with name of service
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Service'
      required: true
    ServiceCall:
      description: JSON object with service call information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceCall'
      required: true
    TravelEvent:
      description: JSON object with travel event information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TravelEvent'
      required: true
